<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Services on My Blog</title>
        <link>http://192.168.100.63:1313/tags/services/</link>
        <description>Recent content in Services on My Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 13 Mar 2025 12:00:00 -0500</lastBuildDate><atom:link href="http://192.168.100.63:1313/tags/services/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nextcloud Setup</title>
        <link>http://192.168.100.63:1313/projects/self-hosting-nextcloud/</link>
        <pubDate>Thu, 13 Mar 2025 12:00:00 -0500</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/self-hosting-nextcloud/</guid>
        <description>&lt;h1 id=&#34;my-nextcloud-architecture-what-i-learned-building-a-proper-self-hosted-setup&#34;&gt;&lt;a href=&#34;#my-nextcloud-architecture-what-i-learned-building-a-proper-self-hosted-setup&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;My Nextcloud Architecture: What I Learned Building a Proper Self-Hosted Setup
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Designing for performance, scalability, and sanity&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;After running a janky Nextcloud install for way too long, I finally sat down to build something proper. The old setup was slow, unstable, and honestly kind of embarrassing when I&amp;rsquo;d try to share files with people. Time for a complete rebuild.&lt;/p&gt;
&lt;p&gt;I spent a lot of time thinking about the architecture before diving in. Most Nextcloud guides just throw everything on one machine and call it done, but I wanted something that would actually scale and perform well. Here&amp;rsquo;s what I came up with and why.&lt;/p&gt;
&lt;h2 id=&#34;the-architecture-splitting-things-up-smart&#34;&gt;&lt;a href=&#34;#the-architecture-splitting-things-up-smart&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Architecture: Splitting Things Up Smart
&lt;/h2&gt;&lt;h3 id=&#34;fast-app-cheap-storage&#34;&gt;&lt;a href=&#34;#fast-app-cheap-storage&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Fast App, Cheap Storage
&lt;/h3&gt;&lt;p&gt;The core insight was realizing that not everything needs the same performance profile. The Nextcloud application itself - all that PHP code handling web requests - needs to be snappy. But the actual files? A vacation video from three years ago doesn&amp;rsquo;t need NVMe speeds.&lt;/p&gt;
&lt;p&gt;So I split things up:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nextcloud app lives on SSD&lt;/strong&gt; - The core application runs in an LXC container on local SSD storage. This keeps the web interface responsive and file operations quick.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL gets its own space&lt;/strong&gt; - Database runs separately with enough resources to handle concurrent users without choking. I went with PostgreSQL instead of the usual MySQL/MariaDB choice for reasons I&amp;rsquo;ll get into.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bulk storage on HDD pool&lt;/strong&gt; - All the actual user files live on a ZFS pool built from cheaper spinning disks. Still plenty fast for streaming videos or downloading documents, but way more cost-effective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backups go to the NAS&lt;/strong&gt; - Eventually. I&amp;rsquo;m still working on automating this part, but the plan is nightly snapshots to a separate machine.&lt;/p&gt;
&lt;p&gt;This approach gives me fast UI response times without breaking the bank on storage costs.&lt;/p&gt;
&lt;h2 id=&#34;why-nextcloud-over-everything-else&#34;&gt;&lt;a href=&#34;#why-nextcloud-over-everything-else&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Why Nextcloud Over Everything Else?
&lt;/h2&gt;&lt;p&gt;I looked at a bunch of options - ownCloud, Seafile, even just running straight WebDAV. But Nextcloud hit the sweet spot of features vs complexity.&lt;/p&gt;
&lt;p&gt;The file sync works reliably across all my devices, the sharing features are actually usable, and there&amp;rsquo;s a decent ecosystem of apps for calendars, tasks, and other stuff. Plus it&amp;rsquo;s actively developed and has good community support.&lt;/p&gt;
&lt;p&gt;Most importantly, I own all my data. No more wondering if Google is going to kill another service or if Dropbox is going to change their pricing again.&lt;/p&gt;
&lt;h2 id=&#34;the-technical-decisions&#34;&gt;&lt;a href=&#34;#the-technical-decisions&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Technical Decisions
&lt;/h2&gt;&lt;h3 id=&#34;turnkey-lxc-standing-on-shoulders&#34;&gt;&lt;a href=&#34;#turnkey-lxc-standing-on-shoulders&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;TurnKey LXC: Standing on Shoulders
&lt;/h3&gt;&lt;p&gt;I could have built everything from scratch, but why reinvent the wheel? The TurnKey Linux Nextcloud template comes with everything pre-configured - Apache, PHP, Redis, security hardening, the works.&lt;/p&gt;
&lt;p&gt;LXC over VM was a no-brainer. Same isolation benefits but way less overhead. Why waste RAM on a full kernel when you don&amp;rsquo;t need it?&lt;/p&gt;
&lt;p&gt;I gave it 4 vCPUs and 8GB of RAM. Might seem like overkill, but Nextcloud actually benefits from having resources available for caching and concurrent operations.&lt;/p&gt;
&lt;h3 id=&#34;postgresql-the-database-choice&#34;&gt;&lt;a href=&#34;#postgresql-the-database-choice&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;PostgreSQL: The Database Choice
&lt;/h3&gt;&lt;p&gt;This one might be controversial. Most Nextcloud setups use MariaDB, and it works fine. But I went with PostgreSQL for a few reasons:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Better concurrency handling&lt;/strong&gt; - When multiple people are accessing files simultaneously, PostgreSQL&amp;rsquo;s MVCC system handles it more gracefully.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSON performance&lt;/strong&gt; - Nextcloud stores a lot of metadata, and PostgreSQL&amp;rsquo;s JSON operations are genuinely faster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Personal preference&lt;/strong&gt; - I&amp;rsquo;ve had fewer weird issues with PostgreSQL over the years. Call it superstition if you want.&lt;/p&gt;
&lt;p&gt;Setting it up was straightforward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install -y postgresql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the database:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo -u postgres psql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE DATABASE nextcloud;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE USER nextclouduser WITH PASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your-secure-password&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALTER DATABASE nextcloud OWNER TO nextclouduser;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Point Nextcloud at the external database server and done.&lt;/p&gt;
&lt;h3 id=&#34;storage-strategy-ssd-where-it-matters&#34;&gt;&lt;a href=&#34;#storage-strategy-ssd-where-it-matters&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Storage Strategy: SSD Where It Matters
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s where most people get it wrong. They either put everything on expensive SSD storage, or they put everything on cheap HDDs and wonder why their Nextcloud feels sluggish.&lt;/p&gt;
&lt;p&gt;The trick is being strategic about it:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSD hosts the application&lt;/strong&gt; - All the PHP code, temporary files, and active caching live on fast local storage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HDD pool for user data&lt;/strong&gt; - Documents, photos, videos - all the stuff that doesn&amp;rsquo;t need millisecond access times but does need lots of space.&lt;/p&gt;
&lt;p&gt;Setting up the HDD mount was pretty standard ZFS stuff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zfs create -o mountpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/r430pool/nextcloud r430pool/nextcloud
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then mount it in the LXC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano /etc/pve/lxc/101.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mp0: /mnt/r430pool/nextcloud,mp=/mnt/nextcloud
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Move the data over:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -av /var/www/nextcloud/data/ /mnt/nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update the config to point to the new location and restart. The performance difference is immediately noticeable.&lt;/p&gt;
&lt;h3 id=&#34;caching-making-it-actually-fast&#34;&gt;&lt;a href=&#34;#caching-making-it-actually-fast&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Caching: Making It Actually Fast
&lt;/h3&gt;&lt;p&gt;Default Nextcloud can feel pretty sluggish, especially with lots of files. The solution is proper caching at multiple levels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APCu for local caching&lt;/strong&gt; - Keeps frequently accessed PHP objects in memory instead of hitting the database constantly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis for file locking&lt;/strong&gt; - Prevents users from stepping on each other when accessing the same files. Way faster than database-based locks.&lt;/p&gt;
&lt;p&gt;Installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install -y redis-server php-redis php-apcu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configuration in &lt;code&gt;config.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memcache.local&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\OC\Memcache\APCu&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memcache.locking&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\OC\Memcache\Redis&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;host&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is honestly dramatic. Operations that used to take 5-10 seconds now happen almost instantly.&lt;/p&gt;
&lt;h2 id=&#34;whats-working-well&#34;&gt;&lt;a href=&#34;#whats-working-well&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What&amp;rsquo;s Working Well
&lt;/h2&gt;&lt;p&gt;After running this setup for several months, I&amp;rsquo;m pretty happy with the results:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Performance is solid&lt;/strong&gt; - Web interface is responsive, file operations are quick, multiple users don&amp;rsquo;t slow each other down.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storage scaling works&lt;/strong&gt; - I can add more HDDs to the pool without touching the application layer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintenance is minimal&lt;/strong&gt; - The TurnKey base handles security updates automatically, and the modular design means I can update components independently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Costs are reasonable&lt;/strong&gt; - Most of the storage is on cheap HDDs, with SSD only where it actually matters.&lt;/p&gt;
&lt;h2 id=&#34;still-to-do&#34;&gt;&lt;a href=&#34;#still-to-do&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Still To Do
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Automated backups&lt;/strong&gt; - I&amp;rsquo;ve got the basic rsync command figured out, just need to script it and set up monitoring:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -av /mnt/nextcloud/ /mnt/nas/backups/nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;SMTP integration&lt;/strong&gt; - Would be nice to get email notifications working for shares and password resets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OnlyOffice maybe&lt;/strong&gt; - The built-in document editing is pretty basic. Might be worth setting up a proper office suite integration.&lt;/p&gt;
&lt;h2 id=&#34;lessons-learned&#34;&gt;&lt;a href=&#34;#lessons-learned&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Lessons Learned
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Architecture matters more than hardware&lt;/strong&gt; - Splitting components based on their performance needs gave me way better results than just throwing faster hardware at a monolithic setup.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t skimp on the database&lt;/strong&gt; - PostgreSQL in its own container with proper resources makes everything feel more responsive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caching is not optional&lt;/strong&gt; - Redis and APCu turned a sluggish system into something that actually feels professional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plan for growth&lt;/strong&gt; - The modular approach means I can easily add more storage, upgrade components, or even migrate to different hardware without rebuilding everything.&lt;/p&gt;
&lt;p&gt;The whole thing took longer to plan than to implement, but it was worth taking the time to think through the architecture first. Way better than my usual &amp;ldquo;build it and see what breaks&amp;rdquo; approach.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Next project: figuring out why my backup script keeps failing at 3 AM. There&amp;rsquo;s always something.&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

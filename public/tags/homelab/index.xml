<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Homelab on The Patch Panel</title>
        <link>http://192.168.100.63:1313/tags/homelab/</link>
        <description>Recent content in Homelab on The Patch Panel</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 01 May 2025 15:00:00 -0400</lastBuildDate><atom:link href="http://192.168.100.63:1313/tags/homelab/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>First Homelab: Reflections, Diagram, and Stack</title>
        <link>http://192.168.100.63:1313/projects/homelab/</link>
        <pubDate>Thu, 01 May 2025 15:00:00 -0400</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/homelab/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/HL.jpg" alt="Featured image of post First Homelab: Reflections, Diagram, and Stack" /&gt;&lt;p&gt;&lt;img src=&#34;http://192.168.100.63:1313/img/HL.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Homelab Diagram&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;building-my-first-homelab-reflections-stack-and-next-steps&#34;&gt;&lt;a href=&#34;#building-my-first-homelab-reflections-stack-and-next-steps&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Building My First Homelab: Reflections, Stack, and Next Steps
&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;ve always admired the impressive homelab diagrams circulating on self-hosting forums. After years of lurking, tinkering, and gradually collecting hardware, I finally decided to document my own setup and journey.&lt;/p&gt;
&lt;p&gt;This post summarizes what I&amp;rsquo;m running, what I&amp;rsquo;ve learned along the way, and how a casual experiment turned into a full-blown hobby.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;from-proxmox-curiosity-to-a-full-rack&#34;&gt;&lt;a href=&#34;#from-proxmox-curiosity-to-a-full-rack&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;From Proxmox Curiosity to a Full Rack
&lt;/h2&gt;&lt;p&gt;The homelab journey began a couple of years ago, when I picked up a Lenovo m720q Tiny to run a Kali VM for some light pen-testing and CTF challenges. The spark was there, but life intervened, and the project was shelved.&lt;/p&gt;
&lt;p&gt;Still, the curiosity stuck. After discovering the homelab and self-hosted communities, I took the plunge and bought two used servers—a Dell r730xd and an r430—right before the arrival of our second child. As you might expect, the servers went straight into storage.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;picking-up-the-project&#34;&gt;&lt;a href=&#34;#picking-up-the-project&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Picking Up the Project
&lt;/h2&gt;&lt;p&gt;Earlier this year, with a bit more time and sleep, I finally assembled the rack, wired up switches, and started building out the network. What started as a few VMs quickly became a full stack: network segmentation, VLANs, containers, and a host of new services.&lt;/p&gt;
&lt;p&gt;Recently, my attention has shifted toward AI experimentation. I built a dedicated AI rig, first with MI50 GPUs and now with 3090s and 3090Tis. Running local LLMs, experimenting with AI agents, and integrating custom tools has been a huge part of the learning curve.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;background&#34;&gt;&lt;a href=&#34;#background&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Background
&lt;/h2&gt;&lt;p&gt;For context, I’m not a professional system administrator. My background is in tech leadership and data science for a large company, but the homelab is strictly a hobby. It’s a late-night project fueled by curiosity, trial-and-error, and a desire to truly understand the technology I use.&lt;/p&gt;
&lt;p&gt;I enjoy exploring open-source services, experimenting with network architectures (sometimes to excess), and continually learning about security and automation in a hands-on way.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;current-stack&#34;&gt;&lt;a href=&#34;#current-stack&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Current Stack
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s what I have running today, organized by function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Media &amp;amp; Entertainment&lt;/strong&gt;&lt;br&gt;
Jellyfin, *arr suite (Readarr, Prowlarr, etc.), qBittorrent with Gluetun VPN, Audiobookshelf&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lifestyle &amp;amp; Smart Home&lt;/strong&gt;&lt;br&gt;
Tandoor (recipes), Bar Assistant, Plant It, FreshRSS, Home Assistant&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productivity &amp;amp; Documentation&lt;/strong&gt;&lt;br&gt;
Gitea (private Git), Nextcloud, PaperlessNGX, Draw.io, Filebrowser, n8n, Karakeep, Linkwarden, SANE Network Scanning, Kopia&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Databases&lt;/strong&gt;&lt;br&gt;
MariaDB, PostgreSQL, InfluxDB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monitoring &amp;amp; Management&lt;/strong&gt;&lt;br&gt;
Grafana, Uptime Kuma, Homepage dashboard, Portainer, Watchtower, Prometheus&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security &amp;amp; Networking&lt;/strong&gt;&lt;br&gt;
OPNSense, Fail2Ban, Authelia (SSO/2FA), Pi-hole, Traefik, MITMproxy, Tailscale, Cloudflared&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI Stack&lt;/strong&gt;&lt;br&gt;
llama.cpp, AnythingLLM, PostgreSQL with pgvector, n8n for orchestration&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;upcoming-projects&#34;&gt;&lt;a href=&#34;#upcoming-projects&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Upcoming Projects
&lt;/h2&gt;&lt;p&gt;Like most homelabbers, my &amp;ldquo;future plans&amp;rdquo; list is always growing. On the shortlist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changedetection, Dashy, Glance, Homarr&lt;/li&gt;
&lt;li&gt;Revisit Matrix/Element setup&lt;/li&gt;
&lt;li&gt;Firefly III (personal finance), Immich (photos), Joplin (notes)&lt;/li&gt;
&lt;li&gt;Lube Logger, Monica, OnlyOffice, Open Meteo, Rocket.Chat, Syncthing, VSCode Server (currently running locally)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lessons-learned&#34;&gt;&lt;a href=&#34;#lessons-learned&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Lessons Learned
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Hardware is interesting, but the real power is in what you do with it. The software ecosystem is where experimentation pays off.&lt;/li&gt;
&lt;li&gt;Network segmentation can be addictive. One VLAN for IoT leads to many more as complexity grows.&lt;/li&gt;
&lt;li&gt;Backups matter. Tools like Kopia and PaperlessNGX have already proven invaluable for recovery and organization.&lt;/li&gt;
&lt;li&gt;You do not need to be a sysadmin to run a homelab. Curiosity and persistence are more important than credentials.&lt;/li&gt;
&lt;li&gt;There is always more to learn, and that&amp;rsquo;s what makes this hobby worth the investment.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;&lt;a href=&#34;#next-steps&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Next Steps
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m planning a follow-up with hardware photos and a deep dive into the AI stack and automation workflows. If you have feedback, advice, or want to trade configs, let me know. I&amp;rsquo;m always looking for ways to improve or expand the lab.&lt;/p&gt;
&lt;p&gt;Stay tuned for more, and happy self-hosting.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Building a Robust Access Layer for Self-Hosted Services</title>
        <link>http://192.168.100.63:1313/projects/tunnel-setup/</link>
        <pubDate>Wed, 20 Nov 2024 12:00:00 -0500</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/tunnel-setup/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/oneoff/authelia1.png" alt="Featured image of post Building a Robust Access Layer for Self-Hosted Services" /&gt;&lt;h1 id=&#34;making-my-self-hosted-services-actually-accessible-without-going-insane&#34;&gt;&lt;a href=&#34;#making-my-self-hosted-services-actually-accessible-without-going-insane&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Making My Self-Hosted Services Actually Accessible (Without Going Insane)
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;How I finally got my recipe manager working from anywhere without poking holes in my firewall&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Posted: May 14, 2025 | 6 min read&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So here&amp;rsquo;s the thing - I&amp;rsquo;ve been running services in my homelab for years, and every time I want to access something remotely, it turns into this whole ordeal. You know the drill: &amp;ldquo;just open a port,&amp;rdquo; they say. &amp;ldquo;Point your domain at it,&amp;rdquo; they say. Yeah, right. Tell that to my segmented VLANs and my paranoia about security.&lt;/p&gt;
&lt;p&gt;Last month I finally had enough. My wife kept asking why she couldn&amp;rsquo;t access our recipe collection (Tandoor Recipes) when she was out grocery shopping, and honestly, I was getting tired of VPN&amp;rsquo;ing in just to check if I had the ingredients for dinner. Time to build something proper.&lt;/p&gt;
&lt;p&gt;After way too much research and probably more frustration than necessary, I ended up with a setup using Cloudflared tunnels, Traefik, and Authelia. Spoiler alert: it actually works really well now, but getting there was&amp;hellip; an adventure.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-aka-why-simple-solutions-suck&#34;&gt;&lt;a href=&#34;#the-problem-aka-why-simple-solutions-suck&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Problem (aka Why Simple Solutions Suck)
&lt;/h2&gt;&lt;p&gt;My homelab isn&amp;rsquo;t just one machine sitting in a closet. I&amp;rsquo;ve got services scattered across different VLANs because, you know, security. Tandoor lives on its own Docker host, the proxy stuff is somewhere else, and everything&amp;rsquo;s firewalled to hell and back.&lt;/p&gt;
&lt;p&gt;What I wanted was pretty reasonable, I thought:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access my stuff from anywhere without opening ports&lt;/li&gt;
&lt;li&gt;Stop managing separate logins for everything&lt;/li&gt;
&lt;li&gt;Make it user-friendly enough that my family could actually use it&lt;/li&gt;
&lt;li&gt;Keep it modular so I&amp;rsquo;m not locked into some monolithic solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;ldquo;just use a VPN&amp;rdquo; crowd can save it - I wanted something that actually felt like using a normal website.&lt;/p&gt;
&lt;h2 id=&#34;how-i-solved-it-the-technical-bits&#34;&gt;&lt;a href=&#34;#how-i-solved-it-the-technical-bits&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;How I Solved It (The Technical Bits)
&lt;/h2&gt;&lt;h3 id=&#34;the-stack&#34;&gt;&lt;a href=&#34;#the-stack&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Stack
&lt;/h3&gt;&lt;p&gt;I went with three main pieces:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloudflared Tunnel&lt;/strong&gt; - This thing is honestly brilliant. Instead of punching holes in your firewall, it creates an outbound connection to Cloudflare. Your services stay completely internal, but you can access them through proper domains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traefik&lt;/strong&gt; - Handles all the reverse proxy magic. Routes requests, manages SSL certificates, plays nice with Docker labels. Once you get the hang of it, adding new services is actually pretty painless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authelia&lt;/strong&gt; - The authentication layer. Single sign-on, 2FA, granular access controls. Makes everything feel professional instead of like a garage project.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how they fit together:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Internet
   │
Cloudflare (your domain DNS)
   │
Cloudflared Tunnel (Docker container)
   │
Traefik Reverse Proxy
   │
Authelia Authentication
   │
Tandoor Service (on another VLAN)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;getting-cloudflared-working&#34;&gt;&lt;a href=&#34;#getting-cloudflared-working&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Getting Cloudflared Working
&lt;/h3&gt;&lt;p&gt;The tunnel setup was actually the easiest part, which surprised me. Create a tunnel in the Cloudflare dashboard, grab the token, throw it in a Docker container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloudflared&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cloudflare/cloudflared:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tunnel run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;TUNNEL_TOKEN=&amp;lt;your-token-here&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./cloudflared:/etc/cloudflared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only gotcha I hit was making sure the credentials file was mounted properly. Oh, and if you&amp;rsquo;re dealing with WebSocket apps, you might need some extra config - learned that one the hard way.&lt;/p&gt;
&lt;h3 id=&#34;traefik-configuration-hell-then-heaven&#34;&gt;&lt;a href=&#34;#traefik-configuration-hell-then-heaven&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Traefik Configuration Hell (Then Heaven)
&lt;/h3&gt;&lt;p&gt;Traefik&amp;rsquo;s great once it&amp;rsquo;s working, but man, those labels are picky. Miss a capital letter or mess up the syntax and nothing works. No helpful error messages either - it just silently ignores your configuration.&lt;/p&gt;
&lt;p&gt;My static config ended up looking like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# traefik.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;web&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:80&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;websecure&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;providers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;docker&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;exposedByDefault&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;certificatesResolvers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;cloudflare&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;acme&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your-email@domain.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/traefik/acme.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;dnsChallenge&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;provider&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cloudflare&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For services, the labels look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.enable=true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.tandoor.rule=Host(`recipes.yourdomain.com`)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.tandoor.entrypoints=websecure&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.tandoor.tls.certresolver=cloudflare&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.tandoor.middlewares=authelia@docker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pro tip: Use a YAML linter. Seriously. Saved me hours of debugging.&lt;/p&gt;
&lt;h3 id=&#34;authelia-powerful-but-intimidating&#34;&gt;&lt;a href=&#34;#authelia-powerful-but-intimidating&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Authelia: Powerful but Intimidating
&lt;/h3&gt;&lt;p&gt;Authelia&amp;rsquo;s config file is&amp;hellip; extensive. Like, really extensive. I probably spent more time on this than everything else combined, mostly because I kept overthinking it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what worked for me (simplified):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9091&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;log_level&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;info&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;authentication_backend&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/config/users_database.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;access_control&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;default_policy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deny&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recipes.yourdomain.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;policy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;two_factor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;session&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;authelia_session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;your-secret-here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;expiration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;local&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/config/db.sqlite3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;notifier&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;filesystem&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;filename&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/config/notification.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start simple, get it working, then add complexity. Trust me on this one.&lt;/p&gt;
&lt;h3 id=&#34;the-vlan-nightmare&#34;&gt;&lt;a href=&#34;#the-vlan-nightmare&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The VLAN Nightmare
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s where things got interesting. Tandoor runs on a completely different network segment, so Traefik couldn&amp;rsquo;t just magically find it. I had to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open firewall rules between the Traefik host and Tandoor&amp;rsquo;s host&lt;/li&gt;
&lt;li&gt;Set up proper DNS resolution (or just use IP addresses)&lt;/li&gt;
&lt;li&gt;Configure Traefik to route to the external service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key was adding this to Traefik:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.services.tandoor.loadbalancer.server.url=http://192.168.100.100:8085&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Took me way too long to figure out that one line.&lt;/p&gt;
&lt;h2 id=&#34;what-i-learned-the-hard-way&#34;&gt;&lt;a href=&#34;#what-i-learned-the-hard-way&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What I Learned (The Hard Way)
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;VLANs will humble you.&lt;/strong&gt; I thought I knew networking. I was wrong. Spend time getting your firewall rules right before you blame the software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start with the basics.&lt;/strong&gt; Don&amp;rsquo;t try to set up everything at once. Get a simple HTTP service working first, then add authentication, then SSL, then complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Documentation is your friend.&lt;/strong&gt; Especially for Authelia - that config file has about 50 different options and most of them aren&amp;rsquo;t obvious.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version control everything.&lt;/strong&gt; I keep all my configs in a private Git repo. When something breaks (and it will), you can actually figure out what changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloudflared is magic.&lt;/strong&gt; Seriously, the peace of mind of not having any open ports is worth the setup hassle.&lt;/p&gt;
&lt;h2 id=&#34;was-it-worth-it&#34;&gt;&lt;a href=&#34;#was-it-worth-it&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Was It Worth It?
&lt;/h2&gt;&lt;p&gt;Absolutely. My wife can now check recipes while shopping, I can access my services from anywhere, and I sleep better knowing I&amp;rsquo;m not running an open port festival.&lt;/p&gt;
&lt;p&gt;The best part? Adding new services is actually easy now. Same pattern every time: add the Docker labels, create an Authelia rule, done. It scales really well once you have the foundation in place.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re thinking about doing something similar, start small. Pick one service, get it working end-to-end, then expand. The modular approach means you&amp;rsquo;re not locked into anything - if you hate Traefik tomorrow, you can swap it out without rebuilding everything.&lt;/p&gt;
&lt;p&gt;And hey, if you get stuck, the homelab community is pretty helpful. Just don&amp;rsquo;t ask them about VLANs unless you want a 3-hour discussion about network segmentation philosophy.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;All the config files and Docker Compose examples are in my GitHub repo if you want to see the full setup. Just search for my username and &amp;ldquo;homelab-access-stack&amp;rdquo; or something like that.&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>From Torrent to Library: Automating TV, Movies, and Audiobooks with Gluetun, qBittorrent, and arr</title>
        <link>http://192.168.100.63:1313/projects/torrent-setup/</link>
        <pubDate>Tue, 19 Nov 2024 13:00:00 -0400</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/torrent-setup/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/head/arr.png" alt="Featured image of post From Torrent to Library: Automating TV, Movies, and Audiobooks with Gluetun, qBittorrent, and arr" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;building-my-perfect-media-automation-pipeline&#34;&gt;&lt;a href=&#34;#building-my-perfect-media-automation-pipeline&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Building My Perfect Media Automation Pipeline
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;How I stopped manually managing downloads and built a self-running media server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Posted: May 14, 2025 | ~11 minute read&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I got tired of the constant dance. Download something, figure out where it went, rename it properly, move it to the right folder, update the media server. Rinse and repeat, dozens of times a week. There had to be a better way.&lt;/p&gt;
&lt;p&gt;What I really wanted was dead simple: new episodes show up automatically, everything gets organized correctly, and most importantly, my ISP never sees what I&amp;rsquo;m actually downloading. After months of tinkering, I finally have a setup that just works.&lt;/p&gt;
&lt;h2 id=&#34;what-i-built&#34;&gt;&lt;a href=&#34;#what-i-built&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What I Built
&lt;/h2&gt;&lt;p&gt;The core idea is a fully automated pipeline that handles everything from search to final organization, all running behind a VPN with proper kill switches. Here&amp;rsquo;s what happens now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sonarr/Radarr monitor for new releases&lt;/li&gt;
&lt;li&gt;They automatically grab torrents through qBittorrent&lt;/li&gt;
&lt;li&gt;Everything downloads through a VPN (Gluetun) with zero IP leaks&lt;/li&gt;
&lt;li&gt;Files get renamed and sorted automatically&lt;/li&gt;
&lt;li&gt;Media shows up in Jellyfin ready to stream&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;No manual intervention required. It&amp;rsquo;s honestly a bit magical when it works right.&lt;/p&gt;
&lt;h2 id=&#34;the-technical-stack&#34;&gt;&lt;a href=&#34;#the-technical-stack&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Technical Stack
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Gluetun&lt;/strong&gt; - This is the secret sauce. It&amp;rsquo;s a VPN container that other containers can route through. No VPN leaks, ever.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;qBittorrent&lt;/strong&gt; - The actual torrent client, but locked inside Gluetun&amp;rsquo;s network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sonarr &amp;amp; Radarr&lt;/strong&gt; - The automation brains for TV and movies respectively&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audiobookshelf&lt;/strong&gt; - Because I got tired of Audible&amp;rsquo;s limitations&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unraid NAS&lt;/strong&gt; - Where everything actually lives&lt;/p&gt;
&lt;p&gt;The architecture looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Internet]
   │
[Gluetun VPN Container]
   │
[qBittorrent Container (network_mode: service:gluetun)]
   │
[Sonarr/Radarr/Audiobookshelf]
   │
[Unraid NAS SMB/NFS Shares]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-vpn-foundation-gluetun&#34;&gt;&lt;a href=&#34;#the-vpn-foundation-gluetun&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The VPN Foundation: Gluetun
&lt;/h2&gt;&lt;p&gt;Most VPN setups are sketchy. They work until they don&amp;rsquo;t, and then your real IP gets exposed while downloading the latest season of whatever. Gluetun solves this by creating a container that other services route through. If the VPN goes down, nothing gets through. Period.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using Private Internet Access because their pricing is decent and they don&amp;rsquo;t keep logs (allegedly). The setup looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;gluetun&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;qmcgaw/gluetun:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cap_add&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;NET_ADMIN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;VPN_SERVICE_PROVIDER=private internet access&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;OPENVPN_USER=your-username&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;OPENVPN_PASSWORD=your-password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;SERVER_COUNTRIES=United States&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080:8080&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# qBittorrent Web UI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8989:8989&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Sonarr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7878:7878&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Radarr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./gluetun:/gluetun&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key insight is that all the web UI ports get mapped through the Gluetun container. This way, if the VPN is down, nothing is accessible.&lt;/p&gt;
&lt;h2 id=&#34;the-download-engine-qbittorrent&#34;&gt;&lt;a href=&#34;#the-download-engine-qbittorrent&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Download Engine: qBittorrent
&lt;/h2&gt;&lt;p&gt;qBittorrent runs inside Gluetun&amp;rsquo;s network namespace, which means it literally cannot access the internet without the VPN being up. This is way more reliable than trying to configure a VPN client inside the container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;qbittorrent&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;linuxserver/qbittorrent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;depends_on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;gluetun&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service:gluetun&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PUID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PGID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;TZ=America/New_York&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;WEBUI_PORT=8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/torrents:/downloads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./qbittorrent/config:/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;network_mode: &amp;quot;service:gluetun&amp;quot;&lt;/code&gt; line is crucial - that&amp;rsquo;s what locks qBittorrent inside the VPN tunnel.&lt;/p&gt;
&lt;h2 id=&#34;the-automation-layer-sonarr-and-radarr&#34;&gt;&lt;a href=&#34;#the-automation-layer-sonarr-and-radarr&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Automation Layer: Sonarr and Radarr
&lt;/h2&gt;&lt;p&gt;These are the tools that actually make everything automatic. They monitor RSS feeds and indexers for new releases, then tell qBittorrent what to download. Once something finishes downloading, they handle the renaming and moving to final folders.&lt;/p&gt;
&lt;p&gt;Sonarr handles TV shows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;sonarr&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;linuxserver/sonarr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service:gluetun&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PUID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PGID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;TZ=America/New_York&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/tv:/tv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/torrents:/downloads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./sonarr/config:/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Radarr does the same thing for movies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;radarr&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;linuxserver/radarr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service:gluetun&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PUID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PGID=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;TZ=America/New_York&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/movies:/movies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/torrents:/downloads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./radarr/config:/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both also run through the VPN, though this is arguably overkill since they&amp;rsquo;re just managing files locally.&lt;/p&gt;
&lt;h2 id=&#34;audiobooks-breaking-free-from-audible&#34;&gt;&lt;a href=&#34;#audiobooks-breaking-free-from-audible&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Audiobooks: Breaking Free from Audible
&lt;/h2&gt;&lt;p&gt;I got sick of Audible&amp;rsquo;s limitations and DRM nonsense, so I added Audiobookshelf to the mix. It&amp;rsquo;s like having your own private audiobook streaming service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;audiobookshelf&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ghcr.io/advplyr/audiobookshelf:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;audiobookshelf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13378:80&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;TZ=America/New_York&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/audiobooks:/audiobooks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/media/ebooks:/ebooks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./audiobookshelf/config:/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;./audiobookshelf/metadata:/metadata&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This one doesn&amp;rsquo;t need the VPN since it&amp;rsquo;s just serving files that are already local.&lt;/p&gt;
&lt;h2 id=&#34;storage-the-unraid-foundation&#34;&gt;&lt;a href=&#34;#storage-the-unraid-foundation&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Storage: The Unraid Foundation
&lt;/h2&gt;&lt;p&gt;Everything lives on my Unraid NAS, shared out via SMB. The Docker containers mount these shares directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/mnt/r430/media/torrents&lt;/code&gt; - Downloads staging area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/mnt/r430/media/tv&lt;/code&gt; - Final TV show library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/mnt/r430/media/movies&lt;/code&gt; - Final movie library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/mnt/r430/media/audiobooks&lt;/code&gt; - Audiobook collection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This keeps everything centralized and accessible to other services like Jellyfin.&lt;/p&gt;
&lt;h2 id=&#34;what-goes-wrong-and-how-to-fix-it&#34;&gt;&lt;a href=&#34;#what-goes-wrong-and-how-to-fix-it&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What Goes Wrong (And How to Fix It)
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;VPN Connection Issues&lt;/strong&gt; - Your VPN provider matters. Some have terrible reliability or throttle torrent traffic. I&amp;rsquo;ve had good luck with PIA, but YMMV.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Permission Nightmares&lt;/strong&gt; - Make sure all containers run with the same PUID/PGID (1000/1000 in my case). Otherwise file moves between containers will fail spectacularly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Network Complexity&lt;/strong&gt; - Docker networking plus VLANs plus VPNs can get weird. Keep it simple - only expose the ports you actually need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storage Explosion&lt;/strong&gt; - Automated downloads can fill up drives fast. Set up monitoring and maybe some cleanup scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality Control&lt;/strong&gt; - Without good filters, you&amp;rsquo;ll end up with terabytes of garbage. Spend time configuring quality profiles in Sonarr/Radarr.&lt;/p&gt;
&lt;h2 id=&#34;lessons-from-the-trenches&#34;&gt;&lt;a href=&#34;#lessons-from-the-trenches&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Lessons from the Trenches
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Test your kill switch&lt;/strong&gt; - Disconnect your VPN and make sure nothing leaks. I use &lt;a class=&#34;link&#34; href=&#34;https://ipleak.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ipleak.net&lt;/a&gt; from inside the qBittorrent container.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version control your configs&lt;/strong&gt; - Keep your Docker Compose files in Git. When (not if) you break something, you can roll back easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monitor disk space&lt;/strong&gt; - Automated downloads are great until they fill your array at 3 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good indexers matter&lt;/strong&gt; - The quality of your automation is only as good as your sources. Invest in decent private trackers if you can.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backup your configs&lt;/strong&gt; - Losing your Sonarr/Radarr database means re-adding everything manually. Not fun.&lt;/p&gt;
&lt;h2 id=&#34;the-results&#34;&gt;&lt;a href=&#34;#the-results&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Results
&lt;/h2&gt;&lt;p&gt;After running this for about six months, I&amp;rsquo;m genuinely happy with how it&amp;rsquo;s working out. New episodes just appear in Jellyfin without me thinking about it. Movies I want to watch show up automatically. Audiobooks sync across all my devices.&lt;/p&gt;
&lt;p&gt;The privacy aspect gives me peace of mind - there&amp;rsquo;s literally no way for downloads to happen without the VPN being active. Even if something goes wrong with the VPN connection, everything just stops rather than falling back to my real IP.&lt;/p&gt;
&lt;p&gt;Performance has been solid too. The VPN overhead is minimal, and having everything automated means the system stays busy during off-peak hours when bandwidth is cheap.&lt;/p&gt;
&lt;h2 id=&#34;worth-the-complexity&#34;&gt;&lt;a href=&#34;#worth-the-complexity&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Worth the Complexity?
&lt;/h2&gt;&lt;p&gt;For me, absolutely. The initial setup took a weekend of tinkering, but now I spend maybe 5 minutes a month managing the whole system. Compare that to the hours I used to spend manually downloading and organizing files.&lt;/p&gt;
&lt;p&gt;The main downside is complexity - there are a lot of moving parts, and troubleshooting can be tricky when something breaks. But the time savings and peace of mind make it worthwhile.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re already comfortable with Docker and have a decent understanding of networking, this setup isn&amp;rsquo;t too bad to replicate. If you&amp;rsquo;re just getting started with self-hosting, maybe begin with something simpler and work your way up.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;&lt;a href=&#34;#whats-next&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What&amp;rsquo;s Next
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m considering adding Prowlarr to manage indexers more centrally, and maybe Bazarr for subtitle automation. The setup is modular enough that adding new components is pretty straightforward.&lt;/p&gt;
&lt;p&gt;I also want to improve the monitoring - knowing when things break before they affect the end user experience would be nice.&lt;/p&gt;
&lt;p&gt;Overall though, this has been one of my more successful homelab projects. It solves a real problem and actually stays working once you get it configured properly.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re curious about specific configuration details or run into issues setting this up, I&amp;rsquo;ve got the full Docker Compose files and notes in my GitHub repo. Just search for my username and &amp;ldquo;media-automation&amp;rdquo; or something similar.&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Self-Hosted Series: Tandoor</title>
        <link>http://192.168.100.63:1313/projects/tandoor/</link>
        <pubDate>Mon, 28 Oct 2024 14:30:00 -0400</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/tandoor/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/head/tandoor.png" alt="Featured image of post Self-Hosted Series: Tandoor" /&gt;&lt;h3 id=&#34;ai-summary&#34;&gt;&lt;a href=&#34;#ai-summary&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;AI Summary
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tandoor Recipes is an open-source, self-hosted recipe manager that solves the scattered bookmark problem&lt;/li&gt;
&lt;li&gt;Features include OCR for digitizing old cookbooks, meal planning tools, and automatic grocery list generation&lt;/li&gt;
&lt;li&gt;Docker deployment on Proxmox with external PostgreSQL provides a robust, backup-friendly architecture&lt;/li&gt;
&lt;li&gt;After months of use, it&amp;rsquo;s genuinely transformed meal planning and grocery shopping workflows&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;finally-getting-my-recipe-chaos-under-control&#34;&gt;&lt;a href=&#34;#finally-getting-my-recipe-chaos-under-control&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Finally Getting My Recipe Chaos Under Control
&lt;/h3&gt;&lt;p&gt;The last time I tried to find that incredible pasta sauce recipe my friend shared, I spent twenty minutes digging through browser bookmarks, photo albums, and random text files. That moment of frustration was the final straw in my ongoing battle with recipe organization chaos.&lt;/p&gt;
&lt;p&gt;My kitchen strategy had devolved into a digital disaster zone. Screenshots buried three layers deep in my camera roll, bookmarks scattered across browsers, handwritten notes shoved in drawers, and the occasional recipe texted to me that vanished into message history. Every attempt at organization failed because the solutions were either too expensive, too limiting, or - my biggest fear - destined to disappear when the company pivoted or shut down.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when I discovered Tandoor Recipes, and it&amp;rsquo;s been a genuine revelation.&lt;/p&gt;
&lt;h3 id=&#34;why-self-hosting-makes-sense-here&#34;&gt;&lt;a href=&#34;#why-self-hosting-makes-sense-here&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Why Self-Hosting Makes Sense Here
&lt;/h3&gt;&lt;p&gt;The conventional wisdom says just use whatever recipe app has the best reviews. But after wrestling with this problem across multiple failed attempts, I realized the fundamental issue wasn&amp;rsquo;t the interface - it was control.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My data stays exactly where I want it.&lt;/strong&gt; I&amp;rsquo;ve been through the Google Reader shutdown, the endless parade of acquired startups, and the slow feature creep of subscription models. Not happening again with something as personal as my recipe collection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zero algorithmic interference.&lt;/strong&gt; I don&amp;rsquo;t need machine learning suggesting recipes based on my &amp;ldquo;cooking personality profile.&amp;rdquo; I need to find my go-to chicken tikka masala when I&amp;rsquo;m standing in the grocery store at 6 PM on a Wednesday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real customization that actually works.&lt;/strong&gt; Custom categories that map to how I actually cook. Tags that make sense to my workflow. A interface that doesn&amp;rsquo;t assume I want to scroll through food photography when I just need the ingredient list.&lt;/p&gt;
&lt;p&gt;The built-in meal planning and grocery list generation turned out to be the killer features I didn&amp;rsquo;t know I needed. But the OCR capability for digitizing old cookbook pages? That&amp;rsquo;s pure magic.&lt;/p&gt;
&lt;h3 id=&#34;the-technical-setup-that-actually-works&#34;&gt;&lt;a href=&#34;#the-technical-setup-that-actually-works&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Technical Setup That Actually Works
&lt;/h3&gt;&lt;p&gt;My homelab runs on a Proxmox cluster, with most applications deployed in a dedicated Docker VM that has plenty of resources allocated. PostgreSQL lives in its own LXC container because centralized database management makes backups and maintenance infinitely easier.&lt;/p&gt;
&lt;p&gt;This architecture has proven rock-solid for Tandoor. The separation means database maintenance doesn&amp;rsquo;t impact the application, and I can snapshot the entire setup independently.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the structure that&amp;rsquo;s been working flawlessly:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/opt/docker/tandoor/          # Application files
/mnt/r430/tandoor/recipes/    # Recipe database
/mnt/r430/tandoor/mediafiles/ # Recipe photos
/mnt/r430/tandoor/staticfiles/ # Static assets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Docker configuration is straightforward but robust:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;web&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vabene1111/recipes:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tandoor_web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/tandoor/recipes:/opt/recipes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/tandoor/mediafiles:/opt/recipes/mediafiles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/mnt/r430/tandoor/staticfiles:/opt/recipes/staticfiles&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env_file&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;.env&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080:8000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;tandoor-net&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tandoor-net&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Environment configuration handles the database connection and Django security settings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Database connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POSTGRES_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-postgres-ip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POSTGRES_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-port
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POSTGRES_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-username
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POSTGRES_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-secure-password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POSTGRES_DB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-postgres-db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Django settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SECRET_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;generate-a-proper-secret-key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALLOWED_HOSTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TZ&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;America/New_York
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Pro tip: Actually generate a real secret key. Django&amp;rsquo;s security depends on it, and &amp;ldquo;password123&amp;rdquo; isn&amp;rsquo;t going to cut it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Database setup in the PostgreSQL LXC is clean and minimal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; dbname;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt; tandoor &lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ENCRYPTED&lt;/span&gt; PASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your-secure-password&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GRANT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIVILEGES&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; dbname &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; dbname &lt;span style=&#34;color:#66d9ef&#34;&gt;OWNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TO&lt;/span&gt; username;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configure PostgreSQL to accept connections from the Docker host network, restart the service, and you&amp;rsquo;re ready to deploy.&lt;/p&gt;
&lt;h3 id=&#34;living-with-tandoor-day-to-day&#34;&gt;&lt;a href=&#34;#living-with-tandoor-day-to-day&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Living With Tandoor Day-to-Day
&lt;/h3&gt;&lt;p&gt;After months of actual use, this setup has fundamentally changed how I approach cooking and meal planning. The web interface is responsive and intuitive - I can quickly add recipes, organize them into logical categories, and actually find things when I need them.&lt;/p&gt;
&lt;p&gt;Recipe import works seamlessly with most cooking websites. Copy the URL, paste it into Tandoor, and it automatically extracts ingredients, instructions, and photos. The parsing accuracy is impressive, though I occasionally need to clean up formatting quirks from particularly complex recipe sites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The OCR feature deserves special recognition.&lt;/strong&gt; I&amp;rsquo;ve been systematically digitizing recipes from family cookbooks that have been collecting dust for years. Take a photo of the page, and Tandoor extracts the text with remarkable accuracy. It&amp;rsquo;s not perfect, but it beats manually typing every ingredient and instruction.&lt;/p&gt;
&lt;p&gt;Meal planning integration has genuinely improved my grocery shopping efficiency. Plan out the week&amp;rsquo;s dinners, and Tandoor automatically generates a consolidated shopping list organized by ingredient type. No more wandering the aisles trying to remember if I already have cumin at home.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storage footprint remains surprisingly light.&lt;/strong&gt; Even with several hundred recipes and associated photos, the entire setup uses less than 2GB of space. Database backups are quick, and the whole system restarts in seconds during maintenance windows.&lt;/p&gt;
&lt;h3 id=&#34;why-this-actually-matters&#34;&gt;&lt;a href=&#34;#why-this-actually-matters&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Why This Actually Matters
&lt;/h3&gt;&lt;p&gt;The real test of any self-hosted solution isn&amp;rsquo;t the initial setup excitement - it&amp;rsquo;s whether you&amp;rsquo;re still using it six months later. Tandoor has passed that test definitively.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It works the way I think about cooking&lt;/em&gt;, not the way some product manager imagined I should think about cooking. Custom categories map to my actual meal rotation. Tags reflect ingredients I commonly substitute or dietary restrictions that matter to my household. The interface gets out of the way and lets me focus on the recipes themselves.&lt;/p&gt;
&lt;p&gt;The peace of mind factor can&amp;rsquo;t be overstated. My recipe collection is backed up alongside my other important data, version controlled, and completely under my control. No subscription fees, no feature deprecation, no sudden policy changes that break my workflow.&lt;/p&gt;
&lt;p&gt;Sure, there are no social features for sharing recipes with friends or browsing community collections. But honestly, that feels like a benefit rather than a limitation. I wanted a tool, not a social network.&lt;/p&gt;
&lt;h3 id=&#34;the-path-forward&#34;&gt;&lt;a href=&#34;#the-path-forward&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Path Forward
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;m still refining the deployment. Adding it to my reverse proxy setup for external access is on the roadmap, and I want to implement automated database backups as part of my broader infrastructure maintenance.&lt;/p&gt;
&lt;p&gt;The mobile app development looks promising for those moments when you&amp;rsquo;re actually standing in the kitchen with flour on your hands trying to remember if the recipe called for one teaspoon or one tablespoon of vanilla.&lt;/p&gt;
&lt;p&gt;For now, the web interface works perfectly on mobile browsers, though a native app would provide a smoother experience for recipe viewing while cooking.&lt;/p&gt;
&lt;h3 id=&#34;worth-the-investment&#34;&gt;&lt;a href=&#34;#worth-the-investment&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Worth the Investment?
&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re already running a homelab with Docker capability, Tandoor integrates seamlessly into your existing infrastructure. The initial setup investment pays dividends immediately through improved meal planning efficiency and the genuine satisfaction of having a recipe management system that works exactly how you want it to.&lt;/p&gt;
&lt;p&gt;The bigger question is whether self-hosting makes sense for your particular situation. If you&amp;rsquo;re comfortable with the technical requirements and value data ownership over convenience features, Tandoor represents exactly the kind of thoughtful, well-executed open source project that makes self-hosting worthwhile.&lt;/p&gt;
&lt;p&gt;My recipe chaos is officially under control. Now I just need to work on actually cooking all these recipes I&amp;rsquo;ve been meticulously organizing.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Building a Production-Ready Nextcloud Setup: From LXC to AI Integration</title>
        <link>http://192.168.100.63:1313/projects/nextcloud/</link>
        <pubDate>Mon, 07 Oct 2024 10:45:00 -0400</pubDate>
        
        <guid>http://192.168.100.63:1313/projects/nextcloud/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/head/Nextcloud.png" alt="Featured image of post Building a Production-Ready Nextcloud Setup: From LXC to AI Integration" /&gt;&lt;h3 id=&#34;ai-summary&#34;&gt;&lt;a href=&#34;#ai-summary&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;AI Summary
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Split Nextcloud architecture across multiple containers for better performance and scalability&lt;/li&gt;
&lt;li&gt;Use PostgreSQL over SQLite/MySQL for better concurrent handling and JSON performance&lt;/li&gt;
&lt;li&gt;Implement proper caching with Redis and APCu to dramatically improve response times&lt;/li&gt;
&lt;li&gt;Integrate with AI document processing pipeline using Paperless-NGX and local LLM infrastructure&lt;/li&gt;
&lt;li&gt;Navigate LXC permission mapping and storage mounting for reliable operation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-problem-with-most-nextcloud-setups&#34;&gt;&lt;a href=&#34;#the-problem-with-most-nextcloud-setups&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Problem with Most Nextcloud Setups
&lt;/h3&gt;&lt;p&gt;After running a janky Nextcloud install for way too long, I finally sat down to build something that wouldn&amp;rsquo;t embarrass me when sharing files. Most guides throw everything on one machine, use SQLite, and wonder why performance is terrible.&lt;/p&gt;
&lt;p&gt;Time for a complete rebuild - one that would scale, perform well, and integrate with my broader AI document processing workflow.&lt;/p&gt;
&lt;h3 id=&#34;architecture-splitting-components-smart&#34;&gt;&lt;a href=&#34;#architecture-splitting-components-smart&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Architecture: Splitting Components Smart
&lt;/h3&gt;&lt;p&gt;The core insight was realizing that different components have completely different performance profiles. The Nextcloud application itself needs to be snappy for web requests. The database needs to handle concurrent operations without choking. But bulk file storage? A vacation video from three years ago doesn&amp;rsquo;t need NVMe speeds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My R430 Proxmox setup handles this with separation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nextcloud app lives on SSD&lt;/strong&gt; - Core application in LXC container on local storage for responsive UI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PostgreSQL gets its own container&lt;/strong&gt; - Dedicated database server with proper resources&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bulk storage on the R730XD&lt;/strong&gt; - User files live on Unraid NAS via NFS mounts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caching layer in Redis&lt;/strong&gt; - File locking and performance optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach gives me fast UI response times without breaking the bank on storage costs, while setting up integration points for my AI processing pipeline.&lt;/p&gt;
&lt;h3 id=&#34;the-lxc-foundation&#34;&gt;&lt;a href=&#34;#the-lxc-foundation&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The LXC Foundation
&lt;/h3&gt;&lt;p&gt;Instead of building everything from scratch, I started with the TurnKey Nextcloud template. It comes pre-configured with Apache, PHP, Redis, and security hardening - no point reinventing the wheel.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pct create &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; local:vztmpl/turnkey-nextcloud-18.0-buster-amd64.tar.gz &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --storage local-zfs &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --hostname NextCloud &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --memory &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --cores &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pct start &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I gave it 8GB RAM and 4 cores because Nextcloud actually benefits from having resources available for caching and concurrent operations. Storage performance matters more than most people realize.&lt;/p&gt;
&lt;h3 id=&#34;database-postgresql-over-everything&#34;&gt;&lt;a href=&#34;#database-postgresql-over-everything&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Database: PostgreSQL Over Everything
&lt;/h3&gt;&lt;p&gt;This is where most setups go wrong. SQLite is fine for testing, but if you want decent performance with multiple devices syncing, you need a proper database server.&lt;/p&gt;
&lt;p&gt;I went with PostgreSQL in its own LXC container for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Better concurrency handling&lt;/strong&gt; - MVCC system handles simultaneous file operations more gracefully&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Superior JSON performance&lt;/strong&gt; - Nextcloud stores tons of metadata, and PostgreSQL&amp;rsquo;s JSON operations are genuinely faster&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal reliability&lt;/strong&gt; - I&amp;rsquo;ve had fewer weird issues with PostgreSQL over the years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setting up the database server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install -y postgresql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable --now postgresql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo -u postgres psql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE DATABASE nextcloud;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE USER nextclouduser WITH PASSWORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your-secure-password&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALTER DATABASE nextcloud OWNER TO nextclouduser;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\q&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;storage-strategy-nfs-integration-with-unraid&#34;&gt;&lt;a href=&#34;#storage-strategy-nfs-integration-with-unraid&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Storage Strategy: NFS Integration with Unraid
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s where the R730XD Unraid server comes into play. Instead of local storage eating up the Proxmox node, I mount NFS shares from the main NAS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On the Unraid side:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create dedicated share for Nextcloud data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Export via NFS with proper permissions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Mounting in the LXC container:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Edit container config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano /etc/pve/lxc/101.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add NFS mount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mp0: /mnt/unraid-nextcloud,mp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/nextcloud
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-permissions-dance-lxc-reality-check&#34;&gt;&lt;a href=&#34;#the-permissions-dance-lxc-reality-check&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Permissions Dance (LXC Reality Check)
&lt;/h3&gt;&lt;p&gt;This is where unprivileged LXC containers get annoying. The UIDs don&amp;rsquo;t match between host and container, so you have to manually map permissions.&lt;/p&gt;
&lt;p&gt;The magic numbers for unprivileged containers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Container UID 33 (www-data) maps to host UID 101033&lt;/li&gt;
&lt;li&gt;Container GID 33 (www-data) maps to host GID 101033&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On Proxmox host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chown -R 101033:101033 /mnt/unraid-nextcloud
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Verify the mapping worked&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -la /mnt/unraid-nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This took me way too long to figure out the first time. The container starts, everything looks fine, then you get permission errors when Nextcloud tries to write files.&lt;/p&gt;
&lt;h3 id=&#34;performance-caching-is-not-optional&#34;&gt;&lt;a href=&#34;#performance-caching-is-not-optional&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Performance: Caching Is Not Optional
&lt;/h3&gt;&lt;p&gt;Default Nextcloud feels sluggish because it hits the database constantly. The solution is proper caching at multiple levels:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install -y redis-server php-redis php-apcu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart apache2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configuration in &lt;code&gt;/var/www/nextcloud/config/config.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memcache.local&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\OC\Memcache\APCu&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memcache.locking&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\OC\Memcache\Redis&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;host&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is honestly dramatic. File operations that used to take 5-10 seconds now happen almost instantly. This is the pivot point where the whole system transforms from &amp;ldquo;usable&amp;rdquo; to &amp;ldquo;professional.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;moving-data-and-final-configuration&#34;&gt;&lt;a href=&#34;#moving-data-and-final-configuration&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Moving Data and Final Configuration
&lt;/h3&gt;&lt;p&gt;With storage mounted and permissions sorted, time to migrate the data directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl stop apache2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -av /var/www/nextcloud/data/ /mnt/nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update config.php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datadirectory&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/mnt/nextcloud&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart apache2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Final LXC configuration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arch: amd64
cores: 4
features: nesting=1
hostname: NextCloud
memory: 8000
mp0: /mnt/unraid-nextcloud,mp=/mnt/nextcloud
net0: name=eth0,bridge=vmbr0,firewall=1,ip=192.168.1.100/24,type=veth
ostype: debian
rootfs: local-zfs:subvol-101-disk-0,size=8G
swap: 8000
unprivileged: 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;verification-and-optimization&#34;&gt;&lt;a href=&#34;#verification-and-optimization&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Verification and Optimization
&lt;/h3&gt;&lt;p&gt;After setup, verify everything is working properly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check status&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su - www-data -s /bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php /var/www/nextcloud/occ status&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Scan for missing files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su - www-data -s /bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php /var/www/nextcloud/occ files:scan --all&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add missing database indices (crucial for performance)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su - www-data -s /bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php /var/www/nextcloud/occ db:add-missing-indices&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That last command is critical - Nextcloud sometimes misses database indices during setup, and they make a huge difference for query performance.&lt;/p&gt;
&lt;h3 id=&#34;integration-with-ai-document-processing-pipeline&#34;&gt;&lt;a href=&#34;#integration-with-ai-document-processing-pipeline&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Integration with AI Document Processing Pipeline
&lt;/h3&gt;&lt;p&gt;This is where things get interesting. The Nextcloud setup I just described isn&amp;rsquo;t just file storage - it&amp;rsquo;s part of a larger AI-powered document processing workflow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The broader architecture includes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dual RTX 3090 AI box&lt;/strong&gt; running &lt;code&gt;llama.cpp&lt;/code&gt; for local LLM inference&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paperless-NGX&lt;/strong&gt; for document OCR and metadata extraction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector databases&lt;/strong&gt; on the R430 for RAG pipelines&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LibreChat&lt;/strong&gt; as frontend for AI interactions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;document-processing-workflow&#34;&gt;&lt;a href=&#34;#document-processing-workflow&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Document Processing Workflow
&lt;/h3&gt;&lt;p&gt;Documents flow through this pipeline:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Upload to Nextcloud&lt;/strong&gt; - Files arrive via web interface or sync clients&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auto-detection&lt;/strong&gt; - Paperless-NGX monitors Nextcloud directories via inotify&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OCR Processing&lt;/strong&gt; - Documents get OCR&amp;rsquo;d and full-text indexed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI Metadata Extraction&lt;/strong&gt; - Local LLMs extract structured metadata, tags, and summaries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage Integration&lt;/strong&gt; - Processed documents return to Nextcloud with enriched metadata&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The technical implementation uses shared storage between containers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paperless-NGX container mounts same NFS shares&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Shared directory structure:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/mnt/nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── documents/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── incoming/     &lt;span style=&#34;color:#75715e&#34;&gt;# Paperless monitors this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── processed/    &lt;span style=&#34;color:#75715e&#34;&gt;# AI-enriched documents&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── archive/      &lt;span style=&#34;color:#75715e&#34;&gt;# Long-term storage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ai-processing-configuration&#34;&gt;&lt;a href=&#34;#ai-processing-configuration&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;AI Processing Configuration
&lt;/h3&gt;&lt;p&gt;The LLM inference happens on the dual RTX 3090 box, with models accessed via API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Example AI metadata extraction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_metadata&lt;/span&gt;(document_path):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;llama-3.1-8b&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prompt&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Extract key metadata from: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;document_text&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max_tokens&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://ai-box:8080/v1/completions&amp;#34;&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The extracted metadata gets written back to Nextcloud as extended attributes and indexed for search.&lt;/p&gt;
&lt;h3 id=&#34;vector-database-integration&#34;&gt;&lt;a href=&#34;#vector-database-integration&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Vector Database Integration
&lt;/h3&gt;&lt;p&gt;For RAG capabilities, documents get embedded and stored in a vector database running on the R430:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Document embedding pipeline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sentence_transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SentenceTransformer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; qdrant_client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SentenceTransformer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all-MiniLM-L6-v2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qdrant_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QdrantClient(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r430-vector-db&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embed_document&lt;/span&gt;(doc_text, doc_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    embedding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(doc_text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upsert(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        collection_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;documents&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        points&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: doc_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vector&amp;#34;&lt;/span&gt;: embedding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;payload&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: doc_text, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nextcloud_path&amp;#34;&lt;/span&gt;: doc_path}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This enables semantic search across all documents via LibreChat or custom interfaces.&lt;/p&gt;
&lt;h3 id=&#34;network-integration-and-security&#34;&gt;&lt;a href=&#34;#network-integration-and-security&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Network Integration and Security
&lt;/h3&gt;&lt;p&gt;The whole setup operates within my VLAN-segmented network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Work VLAN&lt;/strong&gt; - Nextcloud accessible from work devices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal VLAN&lt;/strong&gt; - Home devices and mobile sync&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dirty/Test VLAN&lt;/strong&gt; - AI processing and development work&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DMZ&lt;/strong&gt; - External access via Cloudflare tunnels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Traffic routing through OPNsense with proper firewall rules between VLANs. The Brocade ICX6450 handles Layer 2 switching with 10GbE uplinks between critical services.&lt;/p&gt;
&lt;h3 id=&#34;backup-strategy&#34;&gt;&lt;a href=&#34;#backup-strategy&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Backup Strategy
&lt;/h3&gt;&lt;p&gt;With this much integration, backup becomes critical:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Automated backup script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -av /mnt/nextcloud/ /mnt/r730-backup/nextcloud/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_dump -h postgres-server nextcloud | gzip &amp;gt; /mnt/r730-backup/nextcloud-db-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +%Y%m%d&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.sql.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Vector database backup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec qdrant-container /qdrant/backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kopia handles the actual backup execution with custom repository paths across the infrastructure.&lt;/p&gt;
&lt;h3 id=&#34;performance-results&#34;&gt;&lt;a href=&#34;#performance-results&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Performance Results
&lt;/h3&gt;&lt;p&gt;After several months of operation, the numbers speak for themselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web interface response&lt;/strong&gt; - Sub-second page loads&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File sync performance&lt;/strong&gt; - 50MB+ files transfer smoothly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrent users&lt;/strong&gt; - Multiple devices syncing without conflicts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI processing&lt;/strong&gt; - Documents processed and metadata extracted within minutes of upload&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search performance&lt;/strong&gt; - Semantic search across 10k+ documents in under 200ms&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-id-change&#34;&gt;&lt;a href=&#34;#what-id-change&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What I&amp;rsquo;d Change
&lt;/h3&gt;&lt;p&gt;If I were starting over, a few things I&amp;rsquo;d do differently:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database clustering&lt;/strong&gt; - PostgreSQL works great, but for redundancy I&amp;rsquo;d set up a primary/replica configuration across multiple LXC containers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dedicated AI processing queue&lt;/strong&gt; - Instead of direct monitoring, I&amp;rsquo;d implement a proper job queue (Redis/Celery) for document processing tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Object storage backend&lt;/strong&gt; - Consider MinIO or similar for the bulk storage layer instead of NFS mounts.&lt;/p&gt;
&lt;h3 id=&#34;the-bigger-picture&#34;&gt;&lt;a href=&#34;#the-bigger-picture&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Bigger Picture
&lt;/h3&gt;&lt;p&gt;This isn&amp;rsquo;t just about running Nextcloud - it&amp;rsquo;s about building a foundation for AI-augmented personal data management. The combination of reliable file storage, local AI processing, and semantic search creates something genuinely useful.&lt;/p&gt;
&lt;p&gt;The technical complexity is higher than a basic Nextcloud install, but the capabilities justify the effort. When you can upload a document and immediately search across all your files using natural language queries, or have AI automatically tag and categorize everything - that&amp;rsquo;s when self-hosting becomes genuinely superior to commercial alternatives.&lt;/p&gt;
&lt;p&gt;My hope is that this provides a new lens for your own infrastructure projects. The conversation doesn&amp;rsquo;t end here - I&amp;rsquo;m keen to hear how others are integrating AI capabilities into their self-hosted setups.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Agents on The Patch Panel</title>
        <link>http://192.168.100.63:1313/tags/agents/</link>
        <description>Recent content in Agents on The Patch Panel</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 26 Mar 2025 14:30:00 -0400</lastBuildDate><atom:link href="http://192.168.100.63:1313/tags/agents/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>I Built My Own AI Agent with GPT-4o (And You Can Too)</title>
        <link>http://192.168.100.63:1313/datascience/buildanagent/</link>
        <pubDate>Wed, 26 Mar 2025 14:30:00 -0400</pubDate>
        
        <guid>http://192.168.100.63:1313/datascience/buildanagent/</guid>
        <description>&lt;img src="http://192.168.100.63:1313/img/head/buildanagent.png" alt="Featured image of post I Built My Own AI Agent with GPT-4o (And You Can Too)" /&gt;&lt;h3 id=&#34;ai-summary&#34;&gt;&lt;a href=&#34;#ai-summary&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;AI Summary
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI agents differ from chatbots by taking action through tools, not just providing answers&lt;/li&gt;
&lt;li&gt;You can build a functional agent in an afternoon with basic Python and the OpenAI API&lt;/li&gt;
&lt;li&gt;The core pattern involves GPT-4o as the &amp;ldquo;brain&amp;rdquo; deciding what to do, with Python functions as the &amp;ldquo;hands&amp;rdquo; that execute tasks&lt;/li&gt;
&lt;li&gt;Starting simple with toy examples teaches the fundamental concepts before connecting to real-world services&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;from-chatbot-to-digital-assistant&#34;&gt;&lt;a href=&#34;#from-chatbot-to-digital-assistant&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;From Chatbot to Digital Assistant
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ve been tinkering with AI agents for the past few weeks, and honestly, it&amp;rsquo;s become a bit of an obsession. What started as idle curiosity about &amp;ldquo;what comes after ChatGPT&amp;rdquo; turned into building little digital helpers that can actually accomplish tasks instead of just talking about them.&lt;/p&gt;
&lt;p&gt;The thing that hooked me wasn&amp;rsquo;t the complexity - it was the simplicity. Most people assume AI agents are either science fiction or require a computer science degree to build. The reality is you can create something genuinely useful in a single afternoon with basic Python skills.&lt;/p&gt;
&lt;p&gt;The breakthrough moment came when I realized the difference between asking an AI a question and giving it the ability to take action on your behalf. That&amp;rsquo;s the gap between a chatbot and an agent.&lt;/p&gt;
&lt;h3 id=&#34;the-distinction-that-actually-matters&#34;&gt;&lt;a href=&#34;#the-distinction-that-actually-matters&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The Distinction That Actually Matters
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s the difference in practice:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regular chatbot interaction:&lt;/strong&gt;
&amp;ldquo;What&amp;rsquo;s 2+2?&amp;rdquo;
&lt;em&gt;&amp;ldquo;It&amp;rsquo;s 4!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI agent interaction:&lt;/strong&gt;
&amp;ldquo;Help me budget for my vacation&amp;rdquo;
&lt;em&gt;&amp;ldquo;I&amp;rsquo;ll calculate your available funds, research flight costs, suggest a daily budget, and can book the flights when you&amp;rsquo;re ready.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The agent I&amp;rsquo;m about to walk you through does exactly this kind of multi-step thinking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Takes your goal&lt;/li&gt;
&lt;li&gt;Makes a plan&lt;/li&gt;
&lt;li&gt;Uses actual tools to get things done&lt;/li&gt;
&lt;li&gt;Reports back with results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s basic, sure. But it follows the same fundamental pattern as those million-dollar enterprise systems everyone&amp;rsquo;s talking about.&lt;/p&gt;
&lt;h3 id=&#34;what-you-actually-need&#34;&gt;&lt;a href=&#34;#what-you-actually-need&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;What You Actually Need
&lt;/h3&gt;&lt;p&gt;The barrier to entry is refreshingly low:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8+&lt;/li&gt;
&lt;li&gt;OpenAI API key (GPT-4o works best)&lt;/li&gt;
&lt;li&gt;Two packages: &lt;code&gt;openai&lt;/code&gt; and &lt;code&gt;rich&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it. No complicated frameworks, no cloud deployments, no PhD required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install openai rich
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-1-give-your-agent-some-hands&#34;&gt;&lt;a href=&#34;#step-1-give-your-agent-some-hands&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Step 1: Give Your Agent Some Hands
&lt;/h3&gt;&lt;p&gt;An agent without tools is just an expensive chatbot. Let&amp;rsquo;s start with simple examples that demonstrate the concept:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_todos&lt;/span&gt;(query):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Fake database for demonstration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    todos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Buy milk&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Call mom&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Finish blog post&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Book dentist appointment&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [todo &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; todo &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; todos &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; todo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;simple_calculator&lt;/span&gt;(expression):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str(eval(expression))  &lt;span style=&#34;color:#75715e&#34;&gt;# Don&amp;#39;t do this in production!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;str(e)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now register them so the agent knows what&amp;rsquo;s available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOOLS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;search_todos&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;: search_todos,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Searches the to-do list. Input should be a keyword.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_calculator&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;: simple_calculator,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evaluates math expressions.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;These are toy examples to illustrate the pattern. In production, you&amp;rsquo;d connect to actual APIs, databases, or services. I&amp;rsquo;m working on a full writeup of my PaperlessNGX document management agent that does exactly this - stay tuned.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;step-2-the-agent-brain&#34;&gt;&lt;a href=&#34;#step-2-the-agent-brain&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Step 2: The Agent Brain
&lt;/h3&gt;&lt;p&gt;This is where it gets interesting. We create a decision loop where GPT-4o decides what to do, we execute it, and feed the results back:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openai
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; rich &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_agent&lt;/span&gt;(goal):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re an AI agent that completes tasks using tools. Think step-by-step.&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My goal: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;goal&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[yellow]Thinking...[/yellow]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openai&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChatCompletion&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gpt-4o&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            messages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;messages,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            functions&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: meta[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, meta &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; TOOLS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            function_call&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        reply &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;choices&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        messages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(reply)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; reply&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function_call&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Agent chose to use a tool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tool_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reply[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function_call&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tool_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(reply[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function_call&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arguments&amp;#34;&lt;/span&gt;])[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[green]Using: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;tool_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;tool_input&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)[/green]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TOOLS[tool_name][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;](tool_input)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Feed result back to agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            messages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: tool_name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Agent is done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[cyan]Result:[/cyan]&amp;#34;&lt;/span&gt;, reply[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The magic here: GPT-4o acts as the decision-making &amp;ldquo;brain&amp;rdquo; while your Python functions become its &amp;ldquo;hands&amp;rdquo; for actually executing tasks.&lt;/p&gt;
&lt;h3 id=&#34;step-3-take-it-for-a-test-drive&#34;&gt;&lt;a href=&#34;#step-3-take-it-for-a-test-drive&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Step 3: Take It for a Test Drive
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    openai&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your-api-key-here&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Use environment variables!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    goal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What&amp;#39;s your goal? &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    run_agent(goal)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try these prompts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;What appointments do I have coming up?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Calculate compound interest on $1000 at 5% for 3 years&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Find anything in my todos about family&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s what a typical run looks like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Goal: Search for any appointments in my todos
Thinking...
Using: search_todos(&amp;#39;appointment&amp;#39;)
Result: I found 1 appointment-related item:
- &amp;#34;Book dentist appointment&amp;#34;

You should probably schedule that dentist visit!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;why-this-pattern-actually-works&#34;&gt;&lt;a href=&#34;#why-this-pattern-actually-works&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Why This Pattern Actually Works
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;It chains actions intelligently.&lt;/strong&gt; Give it a complex goal like &amp;ldquo;Calculate my monthly budget and find related todos&amp;rdquo; and watch it break the problem down:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use calculator for budget math&lt;/li&gt;
&lt;li&gt;Search todos for financial items&lt;/li&gt;
&lt;li&gt;Combine and present results&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;It adapts on the fly.&lt;/strong&gt; If a tool returns unexpected results, the agent adjusts its approach. No rigid scripting required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It explains itself.&lt;/strong&gt; You can see exactly what it&amp;rsquo;s doing and why. Full transparency into the decision process.&lt;/p&gt;
&lt;h3 id=&#34;scaling-beyond-toy-examples&#34;&gt;&lt;a href=&#34;#scaling-beyond-toy-examples&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Scaling Beyond Toy Examples
&lt;/h3&gt;&lt;p&gt;The real power emerges when you connect to actual services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weather APIs for context-aware suggestions&lt;/li&gt;
&lt;li&gt;Your calendar for scheduling intelligence&lt;/li&gt;
&lt;li&gt;Email or Slack for communication&lt;/li&gt;
&lt;li&gt;Smart home devices for automation&lt;/li&gt;
&lt;li&gt;Document systems for knowledge retrieval&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also add persistence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store conversation history&lt;/li&gt;
&lt;li&gt;Remember user preferences&lt;/li&gt;
&lt;li&gt;Build context over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or go proactive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run agents on schedules&lt;/li&gt;
&lt;li&gt;Send daily summaries&lt;/li&gt;
&lt;li&gt;Alert about important changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-aha-moment&#34;&gt;&lt;a href=&#34;#the-aha-moment&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;The &amp;ldquo;Aha&amp;rdquo; Moment
&lt;/h3&gt;&lt;p&gt;After playing with this pattern for a few days, something clicked that changed how I think about AI tooling. This isn&amp;rsquo;t just automation - it&amp;rsquo;s delegation to something that can actually reason through problems.&lt;/p&gt;
&lt;p&gt;I tested it with &amp;ldquo;help me prep for my Monday meetings&amp;rdquo; and watched it methodically search my todos for meeting-related items, calculate available prep time, suggest a preparation schedule, and offer to set reminders.&lt;/p&gt;
&lt;p&gt;It felt less like using a tool and more like working with a capable assistant who could think through multi-step problems. That&amp;rsquo;s the fundamental shift with agentic AI - you&amp;rsquo;re not just getting answers, you&amp;rsquo;re getting a thinking partner that can take action.&lt;/p&gt;
&lt;h3 id=&#34;start-building-today&#34;&gt;&lt;a href=&#34;#start-building-today&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Start Building Today
&lt;/h3&gt;&lt;p&gt;The code above is literally all you need to begin. Fork it, modify the tools, add your own functions. Most importantly: start simple and expand gradually.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t try to build Jarvis on day one. Build something that solves one small problem really well, then iterate from there.&lt;/p&gt;
&lt;p&gt;The future isn&amp;rsquo;t about replacing humans with AI - it&amp;rsquo;s about humans working alongside AI that can actually get stuff done. What will you delegate first?&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
